x-mysql-service: &mysql-service
  image: mysql:8.3.0
  healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${MYSQL_USERNAME}", "--password=${MYSQL_PASSWORD}"]
  networks:
    - backend

x-spring-service: &spring-service
  depends_on:
    eureka-server:
      condition: service_healthy
    api-gateway:
      condition: service_healthy
  networks:
    - backend
  deploy:
    resources:
      limits:
        cpus: '0.50'
        memory: 256M


services:
  eureka-server:
    container_name: eureka-server
    build:
      context: ./eureka_server
      dockerfile: eureka_server.Dockerfile
    ports:
      - "8761:8761"
    networks:
      - backend
    healthcheck:
      test: "curl --fail --silent localhost:8761/actuator/health/readiness | grep UP || exit 1"
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 2s

  api-gateway:
    container_name: api-gateway
    build:
      context: ./api_gateway
      dockerfile: api_gateway.Dockerfile
    ports:
      - "8081:8081"
    networks:
      - backend
    healthcheck:
      test: "curl --fail --silent localhost:8081/actuator/health/readiness | grep UP || exit 1"
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 2s
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 256M

  admin-user-service:
    container_name: admin-user-service
    build:
      context: ./admin_user_service
      dockerfile: admin_user_service.Dockerfile
    <<: *spring-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://admin-user-db:3306/adminUserDB
      SPRING_DATASOURCE_USERNAME: ${MYSQL_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "8085:8085"
    healthcheck:
      test: "curl --fail --silent localhost:8085/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 2s
    depends_on:
      admin-user-db:
        condition: service_healthy

  admin-user-db:
    container_name: admin-user-db
    <<: *mysql-service
    environment:
      MYSQL_DATABASE: adminUserDB
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USERNAME}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3316:3306"
    volumes:
      - admin_user_service_db_data:/var/lib/mysql

  guest-user-service:
    container_name: guest-user-service
    build:
      context: ./guest_user_service
      dockerfile: guest_user_service.Dockerfile
    <<: *spring-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://guest-user-db:3306/guestUserDB
      SPRING_DATASOURCE_USERNAME: ${MYSQL_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "8086:8086"
    healthcheck:
      test: "curl --fail --silent localhost:8086/actuator/health/readiness | grep UP || exit 1"
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 2s
    depends_on:
      guest-user-db:
        condition: service_healthy

  guest-user-db:
    container_name: guest-user-db
    <<: *mysql-service
    environment:
      MYSQL_DATABASE: guestUserDB
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USERNAME}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3326:3306"
    volumes:
      - guest_user_service_db_data:/var/lib/mysql

  place-service:
    container_name: place-service
    build:
      context: ./place_service
      dockerfile: place_service.Dockerfile
    <<: *spring-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://place-db:3306/placeDB
      SPRING_DATASOURCE_USERNAME: ${MYSQL_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "8087:8087"
    healthcheck:
      test: "curl --fail --silent localhost:8087/actuator/health/readiness | grep UP || exit 1"
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 2s
    depends_on:
      place-db:
        condition: service_healthy

  place-db:
    container_name: place-db
    <<: *mysql-service
    environment:
      MYSQL_DATABASE: placeDB
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USERNAME}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3336:3306"
    volumes:
      - place_service_db_data:/var/lib/mysql

  reservation-service:
    container_name: reservation-service
    build:
      context: ./reservation_service
      dockerfile: reservation_service.Dockerfile
    <<: *spring-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://reservation-db:3306/reservationDB
      SPRING_DATASOURCE_USERNAME: ${MYSQL_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "8088:8088"
    healthcheck:
      test: "curl --fail --silent localhost:8088/actuator/health/readiness | grep UP || exit 1"
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 2s
    depends_on:
      reservation-db:
        condition: service_healthy

  reservation-db:
    container_name: reservation-db
    <<: *mysql-service
    environment:
      MYSQL_DATABASE: reservationDB
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USERNAME}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3346:3306"
    volumes:
      - reservation_service_db_data:/var/lib/mysql

  custom_jenkins:
    container_name: master-jenkins
    build:
      context: ./
      dockerfile: custom-jenkins.Dockerfile
    image: custom_multi_jenkins
    healthcheck:
      test: ["CMD", "curl", "-f", "http://master-jenkins:8082/health"]
    ports:
      - "8082:8080"
    volumes:
      - jenkins_home_2:/var/jenkins_home
    networks:
      - backend
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  sonarqube:
    container_name: sonarqube
    image: sonarqube:lts-community
    environment:
      SONAR_JDBC_URL: ${SONAR_CONNECTION_STRING}/${PSQL_DB_NAME}
      SONAR_JDBC_USERNAME: ${SONAR_USERNAME}
      SONAR_JDBC_PASSWORD: ${SONAR_PASSWORD}
    ports:
      - "9000:9000"
    depends_on:
      - sonarqube-db
    healthcheck:
      test: CMD wget -qO- http://sonarqube:9000/api/system/status | grep -q -e '"status":"UP"' -e '"status":"DB_MIGRATION_NEEDED"' -e '"status":"DB_MIGRATION_RUNNING"' || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_conf:/opt/sonarqube/conf
    networks:
      - backend
    restart: unless-stopped

  sonarqube-db:
    container_name: sonarqube-db
    image: postgres:12
    environment:
      POSTGRES_DB: ${PSQL_DB_NAME}
      POSTGRES_USER: ${SONAR_USERNAME}
      POSTGRES_PASSWORD: ${SONAR_PASSWORD}
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${SONAR_USERNAME}", "-d", "${PSQL_DB_NAME}"]
    expose:
      - "5432"
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    networks:
      - backend
    restart: unless-stopped

volumes:
  admin_user_service_db_data:
  guest_user_service_db_data:
  place_service_db_data:
  reservation_service_db_data:
  jenkins_home_2:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  sonarqube_conf:
  postgresql_data:

networks:
  backend:
    driver: bridge